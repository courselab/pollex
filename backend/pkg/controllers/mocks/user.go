// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/courselab/pollex/pollex-backend/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *User) CreateUser(user domain.User) (*domain.User, error) {
	ret := _m.Called(user)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(domain.User) *domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: userId
func (_m *User) DeleteUser(userId int32) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: userId
func (_m *User) GetUser(userId int32) (domain.User, error) {
	ret := _m.Called(userId)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(int32) domain.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *User) GetUsers() []domain.User {
	ret := _m.Called()

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	return r0
}

// PatchUser provides a mock function with given fields: userId, user
func (_m *User) PatchUser(userId int32, user domain.User) (domain.User, error) {
	ret := _m.Called(userId, user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(int32, domain.User) domain.User); ok {
		r0 = rf(userId, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, domain.User) error); ok {
		r1 = rf(userId, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: userId, user
func (_m *User) UpdateUser(userId int32, user domain.User) (domain.User, error) {
	ret := _m.Called(userId, user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(int32, domain.User) domain.User); ok {
		r0 = rf(userId, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, domain.User) error); ok {
		r1 = rf(userId, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUser(t mockConstructorTestingTNewUser) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
